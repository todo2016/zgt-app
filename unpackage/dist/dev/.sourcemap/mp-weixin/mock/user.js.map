{"version":3,"file":"user.js","sources":["mock/user.js"],"sourcesContent":["// 用户相关Mock数据\r\nexport const mockUserData = {\r\n  // 模拟用户数据\r\n  users: [\r\n    {\r\n      id: 1,\r\n      username: 'admin',\r\n      password: '123456',\r\n      nickname: '管理员',\r\n      role: '超级管理员',\r\n      avatar: '/static/logo.png',\r\n      email: 'admin@example.com',\r\n      phone: '13800138000',\r\n      status: 'active',\r\n      createTime: '2024-01-01 00:00:00'\r\n    },\r\n    {\r\n      id: 2,\r\n      username: 'user001',\r\n      password: '123456',\r\n      nickname: '张三',\r\n      role: '普通用户',\r\n      avatar: '/static/logo.png',\r\n      email: 'user001@example.com',\r\n      phone: '13800138001',\r\n      status: 'active',\r\n      createTime: '2024-01-02 00:00:00'\r\n    }\r\n  ],\r\n  \r\n  // 模拟登录响应\r\n  loginResponse: {\r\n    code: 0,\r\n    message: '登录成功',\r\n    data: {\r\n      token: 'mock_token_123456789',\r\n      userInfo: {\r\n        id: 1,\r\n        username: 'admin',\r\n        nickname: '管理员',\r\n        role: '超级管理员',\r\n        avatar: '/static/logo.png',\r\n        email: 'admin@example.com',\r\n        phone: '13800138000'\r\n      }\r\n    }\r\n  },\r\n  \r\n  // 模拟用户信息响应\r\n  userInfoResponse: {\r\n    code: 0,\r\n    message: '获取成功',\r\n    data: {\r\n      id: 1,\r\n      username: 'admin',\r\n      nickname: '管理员',\r\n      role: '超级管理员',\r\n      avatar: '/static/logo.png',\r\n      email: 'admin@example.com',\r\n      phone: '13800138000',\r\n      status: 'active',\r\n      createTime: '2024-01-01 00:00:00'\r\n    }\r\n  }\r\n}\r\n\r\n// 模拟登录验证\r\nexport const mockLogin = (username, password) => {\r\n  const user = mockUserData.users.find(u => \r\n    u.username === username && u.password === password\r\n  )\r\n  \r\n  if (user) {\r\n    return {\r\n      success: true,\r\n      data: {\r\n        token: `mock_token_${user.id}_${Date.now()}`,\r\n        userInfo: {\r\n          id: user.id,\r\n          username: user.username,\r\n          nickname: user.nickname,\r\n          role: user.role,\r\n          avatar: user.avatar,\r\n          email: user.email,\r\n          phone: user.phone\r\n        }\r\n      }\r\n    }\r\n  } else {\r\n    return {\r\n      success: false,\r\n      message: '用户名或密码错误'\r\n    }\r\n  }\r\n}\r\n\r\n// 模拟获取用户信息\r\nexport const mockGetUserInfo = (token) => {\r\n  // 简单的token验证\r\n  if (token && token.startsWith('mock_token_')) {\r\n    return {\r\n      success: true,\r\n      data: mockUserData.userInfoResponse.data\r\n    }\r\n  } else {\r\n    return {\r\n      success: false,\r\n      message: 'token无效'\r\n    }\r\n  }\r\n}\r\n\r\n// 模拟微信登录\r\nexport const mockWechatLogin = (code) => {\r\n  // 模拟微信登录成功\r\n  if (code) {\r\n    return {\r\n      success: true,\r\n      data: {\r\n        token: `wechat_token_${Date.now()}`,\r\n        userInfo: {\r\n          id: 3,\r\n          username: 'wechat_user',\r\n          nickname: '微信用户',\r\n          role: '普通用户',\r\n          avatar: '/static/logo.png',\r\n          email: '',\r\n          phone: '',\r\n          openid: 'mock_openid_' + Date.now(),\r\n          unionid: 'mock_unionid_' + Date.now()\r\n        }\r\n      }\r\n    }\r\n  } else {\r\n    return {\r\n      success: false,\r\n      message: '微信登录失败：授权码无效'\r\n    }\r\n  }\r\n}\r\n"],"names":[],"mappings":";AACO,MAAM,eAAe;AAAA;AAAA,EAE1B,OAAO;AAAA,IACL;AAAA,MACE,IAAI;AAAA,MACJ,UAAU;AAAA,MACV,UAAU;AAAA,MACV,UAAU;AAAA,MACV,MAAM;AAAA,MACN,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,YAAY;AAAA,IACb;AAAA,IACD;AAAA,MACE,IAAI;AAAA,MACJ,UAAU;AAAA,MACV,UAAU;AAAA,MACV,UAAU;AAAA,MACV,MAAM;AAAA,MACN,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,YAAY;AAAA,IACb;AAAA,EACF;AAAA;AAAA,EAGD,eAAe;AAAA,IACb,MAAM;AAAA,IACN,SAAS;AAAA,IACT,MAAM;AAAA,MACJ,OAAO;AAAA,MACP,UAAU;AAAA,QACR,IAAI;AAAA,QACJ,UAAU;AAAA,QACV,UAAU;AAAA,QACV,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,OAAO;AAAA,QACP,OAAO;AAAA,MACR;AAAA,IACF;AAAA,EACF;AAAA;AAAA,EAGD,kBAAkB;AAAA,IAChB,MAAM;AAAA,IACN,SAAS;AAAA,IACT,MAAM;AAAA,MACJ,IAAI;AAAA,MACJ,UAAU;AAAA,MACV,UAAU;AAAA,MACV,MAAM;AAAA,MACN,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,YAAY;AAAA,IACb;AAAA,EACF;AACH;AAGY,MAAC,YAAY,CAAC,UAAU,aAAa;AAC/C,QAAM,OAAO,aAAa,MAAM;AAAA,IAAK,OACnC,EAAE,aAAa,YAAY,EAAE,aAAa;AAAA,EAC3C;AAED,MAAI,MAAM;AACR,WAAO;AAAA,MACL,SAAS;AAAA,MACT,MAAM;AAAA,QACJ,OAAO,cAAc,KAAK,EAAE,IAAI,KAAK,IAAG,CAAE;AAAA,QAC1C,UAAU;AAAA,UACR,IAAI,KAAK;AAAA,UACT,UAAU,KAAK;AAAA,UACf,UAAU,KAAK;AAAA,UACf,MAAM,KAAK;AAAA,UACX,QAAQ,KAAK;AAAA,UACb,OAAO,KAAK;AAAA,UACZ,OAAO,KAAK;AAAA,QACb;AAAA,MACF;AAAA,IACF;AAAA,EACL,OAAS;AACL,WAAO;AAAA,MACL,SAAS;AAAA,MACT,SAAS;AAAA,IACV;AAAA,EACF;AACH;AAGY,MAAC,kBAAkB,CAAC,UAAU;AAExC,MAAI,SAAS,MAAM,WAAW,aAAa,GAAG;AAC5C,WAAO;AAAA,MACL,SAAS;AAAA,MACT,MAAM,aAAa,iBAAiB;AAAA,IACrC;AAAA,EACL,OAAS;AACL,WAAO;AAAA,MACL,SAAS;AAAA,MACT,SAAS;AAAA,IACV;AAAA,EACF;AACH;AAGY,MAAC,kBAAkB,CAAC,SAAS;AAEvC,MAAI,MAAM;AACR,WAAO;AAAA,MACL,SAAS;AAAA,MACT,MAAM;AAAA,QACJ,OAAO,gBAAgB,KAAK,IAAK,CAAA;AAAA,QACjC,UAAU;AAAA,UACR,IAAI;AAAA,UACJ,UAAU;AAAA,UACV,UAAU;AAAA,UACV,MAAM;AAAA,UACN,QAAQ;AAAA,UACR,OAAO;AAAA,UACP,OAAO;AAAA,UACP,QAAQ,iBAAiB,KAAK,IAAK;AAAA,UACnC,SAAS,kBAAkB,KAAK,IAAK;AAAA,QACtC;AAAA,MACF;AAAA,IACF;AAAA,EACL,OAAS;AACL,WAAO;AAAA,MACL,SAAS;AAAA,MACT,SAAS;AAAA,IACV;AAAA,EACF;AACH;;;;"}