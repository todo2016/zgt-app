{"version":3,"file":"index.js","sources":["mock/index.js"],"sourcesContent":["// Mock 服务主入口\r\nimport { mockLogin, mockGetUserInfo } from './user'\r\nimport { getCurrentMockConfig } from './config'\r\n\r\n// 获取当前配置\r\nconst config = getCurrentMockConfig()\r\n\r\n// Mock 路由配置\r\nconst mockRoutes = {\r\n  '/api/user/login': {\r\n    method: 'POST',\r\n    handler: (data) => {\r\n      const { username, password } = data\r\n      return mockLogin(username, password)\r\n    }\r\n  },\r\n  '/api/user/info': {\r\n    method: 'GET',\r\n    handler: (token) => {\r\n      return mockGetUserInfo(token)\r\n    }\r\n  },\r\n  '/api/user/register': {\r\n    method: 'POST',\r\n    handler: (data) => {\r\n      return {\r\n        success: true,\r\n        message: '注册成功',\r\n        data: {\r\n          id: Date.now(),\r\n          username: data.username,\r\n          nickname: data.nickname || data.username,\r\n          role: '普通用户',\r\n          avatar: '/static/logo.png'\r\n        }\r\n      }\r\n    }\r\n  },\r\n  '/api/user/logout': {\r\n    method: 'POST',\r\n    handler: () => {\r\n      return {\r\n        success: true,\r\n        message: '退出成功'\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// 创建延迟函数\r\nconst delay = (ms) => new Promise(resolve => setTimeout(resolve, ms))\r\n\r\n// Mock 拦截器\r\nexport const setupMock = () => {\r\n  console.log('[Mock] 检查配置:', config)\r\n  if (!config.enabled) {\r\n    console.log('[Mock] Mock 服务未启用，跳过设置')\r\n    return\r\n  }\r\n\r\n  // 保存原始的 uni.request\r\n  const originalRequest = uni.request\r\n\r\n  // 重写 uni.request\r\n  uni.request = async (options) => {\r\n    const { url, method = 'GET', data, success, fail, complete } = options\r\n\r\n    // 检查是否是 mock 路由\r\n    // 提取路径部分，去掉 baseURL\r\n    const urlPath = url.replace(/^https?:\\/\\/[^\\/]+/, '')\r\n    const mockRoute = mockRoutes[urlPath]\r\n    \r\n    console.log(`[Mock] 请求检查:`, {\r\n      originalUrl: url,\r\n      urlPath: urlPath,\r\n      method: method,\r\n      hasMockRoute: !!mockRoute,\r\n      mockRoute: mockRoute\r\n    })\r\n    \r\n    if (mockRoute && mockRoute.method === method) {\r\n      if (config.showLog) {\r\n        console.log(`[Mock] ${method} ${url}`, data)\r\n      }\r\n\r\n      try {\r\n        // 模拟网络延迟\r\n        await delay(config.delay)\r\n        \r\n        // 调用 mock 处理器\r\n        let mockData\r\n        if (method === 'GET') {\r\n          // GET 请求从 header 中获取 token\r\n          const token = options.header?.Authorization || options.header?.authorization\r\n          mockData = mockRoute.handler(token)\r\n        } else {\r\n          mockData = mockRoute.handler(data)\r\n        }\r\n\r\n        // 转换为标准响应格式\r\n        const response = {\r\n          statusCode: 200,\r\n          header: { 'Content-Type': 'application/json' },\r\n          data: {\r\n            code: mockData.success ? 0 : 1,\r\n            message: mockData.message || (mockData.success ? 'ok' : 'error'),\r\n            data: mockData.data || null\r\n          }\r\n        }\r\n\r\n        if (config.showLog) {\r\n          console.log(`[Mock] Response:`, response)\r\n        }\r\n\r\n        // 调用成功回调\r\n        if (success) {\r\n          success(response)\r\n        }\r\n        \r\n        // 调用完成回调\r\n        if (complete) {\r\n          complete(response)\r\n        }\r\n\r\n        return response\r\n      } catch (error) {\r\n        const errorResponse = {\r\n          statusCode: 500,\r\n          header: { 'Content-Type': 'application/json' },\r\n          data: {\r\n            code: 1,\r\n            message: 'Mock 服务错误',\r\n            data: null\r\n          }\r\n        }\r\n\r\n        if (fail) {\r\n          fail(errorResponse)\r\n        }\r\n        \r\n        if (complete) {\r\n          complete(errorResponse)\r\n        }\r\n\r\n        return errorResponse\r\n      }\r\n    } else {\r\n      // 不是 mock 路由，使用原始请求\r\n      return originalRequest(options)\r\n    }\r\n  }\r\n\r\n  console.log('[Mock] 服务已启动')\r\n}\r\n\r\n// 停止 Mock 服务\r\nexport const stopMock = () => {\r\n  if (config.enabled) {\r\n    // 这里可以恢复原始的 uni.request\r\n    console.log('[Mock] 服务已停止')\r\n  }\r\n}\r\n\r\n// 切换 Mock 状态\r\nexport const toggleMock = () => {\r\n  config.enabled = !config.enabled\r\n  console.log(`[Mock] 服务已${config.enabled ? '启动' : '停止'}`)\r\n}\r\n\r\n// 设置 Mock 延迟\r\nexport const setMockDelay = (delay) => {\r\n  config.delay = delay\r\n  console.log(`[Mock] 延迟设置为 ${delay}ms`)\r\n}\r\n\r\n// 导出配置和路由\r\nexport { config as mockConfig, mockRoutes }\r\n"],"names":["getCurrentMockConfig","mockLogin","mockGetUserInfo","uni","delay"],"mappings":"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"}