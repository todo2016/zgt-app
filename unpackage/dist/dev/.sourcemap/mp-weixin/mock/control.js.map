{"version":3,"file":"control.js","sources":["mock/control.js"],"sourcesContent":["// Mock 控制面板\r\nimport { setupMock, stopMock, toggleMock, setMockDelay, mockConfig } from './index'\r\n\r\nclass MockController {\r\n  constructor() {\r\n    this.isInitialized = false\r\n    this.originalConsole = console.log\r\n    this.mockLogs = []\r\n  }\r\n\r\n  // 初始化控制面板\r\n  init() {\r\n    if (this.isInitialized) return\r\n    \r\n    // 启动 mock 服务\r\n    setupMock()\r\n    \r\n    // 添加控制方法到全局\r\n    if (typeof window !== 'undefined') {\r\n      window.$mock = {\r\n        toggle: this.toggle.bind(this),\r\n        setDelay: this.setDelay.bind(this),\r\n        getStatus: this.getStatus.bind(this),\r\n        getLogs: this.getLogs.bind(this),\r\n        clearLogs: this.clearLogs.bind(this),\r\n        help: this.help.bind(this)\r\n      }\r\n    }\r\n    \r\n    // 添加控制台日志拦截\r\n    this.interceptConsole()\r\n    \r\n    this.isInitialized = true\r\n    console.log('[Mock] 控制面板已初始化')\r\n    console.log('[Mock] 使用 window.$mock 或 console.$mock 控制服务')\r\n  }\r\n\r\n  // 切换 mock 状态\r\n  toggle() {\r\n    toggleMock()\r\n    return this.getStatus()\r\n  }\r\n\r\n  // 设置延迟时间\r\n  setDelay(delay) {\r\n    if (typeof delay === 'number' && delay >= 0) {\r\n      setMockDelay(delay)\r\n      return { success: true, delay }\r\n    } else {\r\n      return { success: false, message: '延迟时间必须是大于等于0的数字' }\r\n    }\r\n  }\r\n\r\n  // 获取状态信息\r\n  getStatus() {\r\n    return {\r\n      enabled: mockConfig.enabled,\r\n      delay: mockConfig.delay,\r\n      showLog: mockConfig.showLog,\r\n      initialized: this.isInitialized\r\n    }\r\n  }\r\n\r\n  // 获取 mock 日志\r\n  getLogs() {\r\n    return this.mockLogs\r\n  }\r\n\r\n  // 清空日志\r\n  clearLogs() {\r\n    this.mockLogs = []\r\n    return { success: true, message: '日志已清空' }\r\n  }\r\n\r\n  // 显示帮助信息\r\n  help() {\r\n    const helpText = `\r\nMock 控制面板使用说明：\r\n\r\n1. 切换服务状态：\r\n   $mock.toggle()\r\n\r\n2. 设置延迟时间：\r\n   $mock.setDelay(500)  // 500ms\r\n\r\n3. 查看服务状态：\r\n   $mock.getStatus()\r\n\r\n4. 查看 mock 日志：\r\n   $mock.getLogs()\r\n\r\n5. 清空日志：\r\n   $mock.clearLogs()\r\n\r\n6. 显示帮助：\r\n   $mock.help()\r\n\r\n当前状态：${JSON.stringify(this.getStatus(), null, 2)}\r\n    `\r\n    console.log(helpText)\r\n    return helpText\r\n  }\r\n\r\n  // 拦截控制台日志\r\n  interceptConsole() {\r\n    const self = this\r\n    \r\n    // 拦截 console.log\r\n    console.log = function(...args) {\r\n      // 调用原始方法\r\n      self.originalConsole.apply(console, args)\r\n      \r\n      // 如果是 mock 日志，保存到日志数组\r\n      const message = args.join(' ')\r\n      if (message.includes('[Mock]')) {\r\n        self.mockLogs.push({\r\n          timestamp: new Date().toISOString(),\r\n          message: message,\r\n          type: 'log'\r\n        })\r\n        \r\n        // 限制日志数量\r\n        if (self.mockLogs.length > 100) {\r\n          self.mockLogs.shift()\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // 销毁控制面板\r\n  destroy() {\r\n    if (!this.isInitialized) return\r\n    \r\n    // 停止 mock 服务\r\n    stopMock()\r\n    \r\n    // 移除全局方法\r\n    if (typeof window !== 'undefined' && window.$mock) {\r\n      delete window.$mock\r\n    }\r\n    \r\n    // 恢复原始控制台\r\n    console.log = this.originalConsole\r\n    \r\n    this.isInitialized = false\r\n    console.log('[Mock] 控制面板已销毁')\r\n  }\r\n}\r\n\r\n// 创建全局实例\r\nconst mockController = new MockController()\r\n\r\n// 导出控制面板\r\nexport default mockController\r\n\r\n// 导出便捷方法\r\nexport const {\r\n  init: initMockControl,\r\n  toggle: toggleMockControl,\r\n  setDelay: setMockDelayControl,\r\n  getStatus: getMockStatus,\r\n  getLogs: getMockLogs,\r\n  clearLogs: clearMockLogs,\r\n  help: showMockHelp,\r\n  destroy: destroyMockControl\r\n} = mockController\r\n\r\n// 自动初始化（在 H5 环境下）\r\nif (typeof window !== 'undefined' && process.env.NODE_ENV === 'development') {\r\n  // 延迟初始化，确保页面加载完成\r\n  setTimeout(() => {\r\n    mockController.init()\r\n  }, 1000)\r\n}\r\n"],"names":["setupMock","uni","toggleMock","setMockDelay","mockConfig","stopMock"],"mappings":";;;AAGA,MAAM,eAAe;AAAA,EACnB,cAAc;AACZ,SAAK,gBAAgB;AACrB,SAAK,kBAAkB,QAAQ;AAC/B,SAAK,WAAW;EAClB;AAAA;AAAA,EAGA,OAAO;AACL,QAAI,KAAK;AAAe;AAGdA,eAAAA;AAGN,QAAA,OAAO,WAAW,aAAa;AACjC,aAAO,QAAQ;AAAA,QACb,QAAQ,KAAK,OAAO,KAAK,IAAI;AAAA,QAC7B,UAAU,KAAK,SAAS,KAAK,IAAI;AAAA,QACjC,WAAW,KAAK,UAAU,KAAK,IAAI;AAAA,QACnC,SAAS,KAAK,QAAQ,KAAK,IAAI;AAAA,QAC/B,WAAW,KAAK,UAAU,KAAK,IAAI;AAAA,QACnC,MAAM,KAAK,KAAK,KAAK,IAAI;AAAA,MAAA;AAAA,IAE7B;AAGA,SAAK,iBAAiB;AAEtB,SAAK,gBAAgB;AACrBC,kBAAAA,MAAA,MAAA,OAAA,yBAAY,iBAAiB;AAC7BA,kBAAAA,MAAA,MAAA,OAAA,yBAAY,6CAA6C;AAAA,EAC3D;AAAA;AAAA,EAGA,SAAS;AACIC,eAAAA;AACX,WAAO,KAAK;EACd;AAAA;AAAA,EAGA,SAAS,OAAO;AACd,QAAI,OAAO,UAAU,YAAY,SAAS,GAAG;AAC3CC,iBAAA,aAAa,KAAK;AACX,aAAA,EAAE,SAAS,MAAM;IAAM,OACzB;AACL,aAAO,EAAE,SAAS,OAAO,SAAS,kBAAkB;AAAA,IACtD;AAAA,EACF;AAAA;AAAA,EAGA,YAAY;AACH,WAAA;AAAA,MACL,SAASC,WAAW,OAAA;AAAA,MACpB,OAAOA,WAAW,OAAA;AAAA,MAClB,SAASA,WAAW,OAAA;AAAA,MACpB,aAAa,KAAK;AAAA,IAAA;AAAA,EAEtB;AAAA;AAAA,EAGA,UAAU;AACR,WAAO,KAAK;AAAA,EACd;AAAA;AAAA,EAGA,YAAY;AACV,SAAK,WAAW;AAChB,WAAO,EAAE,SAAS,MAAM,SAAS,QAAQ;AAAA,EAC3C;AAAA;AAAA,EAGA,OAAO;AACL,UAAM,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAqBd,KAAK,UAAU,KAAK,aAAa,MAAM,CAAC,CAAC;AAAA;AAE5CH,kBAAAA,MAAA,MAAA,OAAA,0BAAY,QAAQ;AACb,WAAA;AAAA,EACT;AAAA;AAAA,EAGA,mBAAmB;AACjB,UAAM,OAAO;AAGL,YAAA,MAAM,YAAY,MAAM;AAEzB,WAAA,gBAAgB,MAAM,SAAS,IAAI;AAGlC,YAAA,UAAU,KAAK,KAAK,GAAG;AACzB,UAAA,QAAQ,SAAS,QAAQ,GAAG;AAC9B,aAAK,SAAS,KAAK;AAAA,UACjB,YAAW,oBAAI,KAAK,GAAE,YAAY;AAAA,UAClC;AAAA,UACA,MAAM;AAAA,QAAA,CACP;AAGG,YAAA,KAAK,SAAS,SAAS,KAAK;AAC9B,eAAK,SAAS;QAChB;AAAA,MACF;AAAA,IAAA;AAAA,EAEJ;AAAA;AAAA,EAGA,UAAU;AACR,QAAI,CAAC,KAAK;AAAe;AAGhBI,eAAAA;AAGT,QAAI,OAAO,WAAW,eAAe,OAAO,OAAO;AACjD,aAAO,OAAO;AAAA,IAChB;AAGA,YAAQ,MAAM,KAAK;AAEnB,SAAK,gBAAgB;AACrBJ,kBAAAA,MAAA,MAAA,OAAA,0BAAY,gBAAgB;AAAA,EAC9B;AACF;AAGA,MAAM,iBAAiB,IAAI;AAkB3B,IAAI,OAAO,WAAW,eAAe,MAAwC;AAE3E,aAAW,MAAM;AACf,mBAAe,KAAK;AAAA,KACnB,GAAI;AACT;"}